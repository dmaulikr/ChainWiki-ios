//
//  ChainLogo.swift
//  ProjectName
//
//  Created by AuthorName on 12/2/16.
//  Copyright Â© 2016 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//
//  This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
//



import UIKit

public class ChainLogo : NSObject {

    //// Drawing Methods

    public dynamic class func drawLogo() {
        // This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
        // http://www.paintcodeapp.com
        
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Color Declarations
        let green = UIColor(red: 0.408, green: 0.635, blue: 0.514, alpha: 1.000)
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        UIColor.black.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()
        
        
        //// icoTab1.pdf Group
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 52, y: 91))
        bezier2Path.addCurve(to: CGPoint(x: 73.65, y: 84.78), controlPoint1: CGPoint(x: 52, y: 91), controlPoint2: CGPoint(x: 63.52, y: 84.78))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 89.15), controlPoint1: CGPoint(x: 85.39, y: 84.77), controlPoint2: CGPoint(x: 100, y: 89.15))
        bezier2Path.addLine(to: CGPoint(x: 86.56, y: 58.47))
        bezier2Path.addCurve(to: CGPoint(x: 69.4, y: 55.03), controlPoint1: CGPoint(x: 86.56, y: 58.47), controlPoint2: CGPoint(x: 80.03, y: 55.49))
        bezier2Path.addCurve(to: CGPoint(x: 52, y: 59.95), controlPoint1: CGPoint(x: 58.77, y: 54.57), controlPoint2: CGPoint(x: 52, y: 59.95))
        bezier2Path.addLine(to: CGPoint(x: 52, y: 91))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 55.4, y: 98.05))
        bezier2Path.addCurve(to: CGPoint(x: 57.98, y: 100), controlPoint1: CGPoint(x: 56.93, y: 98.86), controlPoint2: CGPoint(x: 57.98, y: 100))
        bezier2Path.addCurve(to: CGPoint(x: 71.89, y: 95.89), controlPoint1: CGPoint(x: 57.98, y: 100), controlPoint2: CGPoint(x: 63.64, y: 95.89))
        bezier2Path.addCurve(to: CGPoint(x: 83.6, y: 96.69), controlPoint1: CGPoint(x: 75.37, y: 95.89), controlPoint2: CGPoint(x: 79.55, y: 96.06))
        bezier2Path.addCurve(to: CGPoint(x: 98.62, y: 100), controlPoint1: CGPoint(x: 91.41, y: 97.91), controlPoint2: CGPoint(x: 98.62, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 95.4))
        bezier2Path.addCurve(to: CGPoint(x: 73.8, y: 91), controlPoint1: CGPoint(x: 100, y: 95.4), controlPoint2: CGPoint(x: 85.41, y: 91))
        bezier2Path.addCurve(to: CGPoint(x: 52, y: 97.09), controlPoint1: CGPoint(x: 62.2, y: 91), controlPoint2: CGPoint(x: 52, y: 97.09))
        bezier2Path.addCurve(to: CGPoint(x: 55.4, y: 98.05), controlPoint1: CGPoint(x: 52, y: 97.09), controlPoint2: CGPoint(x: 53.86, y: 97.24))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 48, y: 91))
        bezier2Path.addCurve(to: CGPoint(x: 26.35, y: 84.78), controlPoint1: CGPoint(x: 48, y: 91), controlPoint2: CGPoint(x: 36.48, y: 84.78))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 89.15), controlPoint1: CGPoint(x: 14.61, y: 84.77), controlPoint2: CGPoint(x: 0, y: 89.15))
        bezier2Path.addLine(to: CGPoint(x: 13.44, y: 58.47))
        bezier2Path.addCurve(to: CGPoint(x: 30.6, y: 55.03), controlPoint1: CGPoint(x: 13.44, y: 58.47), controlPoint2: CGPoint(x: 19.97, y: 55.49))
        bezier2Path.addCurve(to: CGPoint(x: 48, y: 59.95), controlPoint1: CGPoint(x: 41.23, y: 54.57), controlPoint2: CGPoint(x: 48, y: 59.95))
        bezier2Path.addLine(to: CGPoint(x: 48, y: 91))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 44.6, y: 98.05))
        bezier2Path.addCurve(to: CGPoint(x: 42.02, y: 100), controlPoint1: CGPoint(x: 43.07, y: 98.86), controlPoint2: CGPoint(x: 42.02, y: 100))
        bezier2Path.addCurve(to: CGPoint(x: 28.11, y: 95.89), controlPoint1: CGPoint(x: 42.02, y: 100), controlPoint2: CGPoint(x: 36.36, y: 95.89))
        bezier2Path.addCurve(to: CGPoint(x: 16.4, y: 96.69), controlPoint1: CGPoint(x: 24.63, y: 95.89), controlPoint2: CGPoint(x: 20.45, y: 96.06))
        bezier2Path.addCurve(to: CGPoint(x: 1.38, y: 100), controlPoint1: CGPoint(x: 8.59, y: 97.91), controlPoint2: CGPoint(x: 1.38, y: 100))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 95.4))
        bezier2Path.addCurve(to: CGPoint(x: 26.2, y: 91), controlPoint1: CGPoint(x: 0, y: 95.4), controlPoint2: CGPoint(x: 14.59, y: 91))
        bezier2Path.addCurve(to: CGPoint(x: 48, y: 97.09), controlPoint1: CGPoint(x: 37.8, y: 91), controlPoint2: CGPoint(x: 48, y: 97.09))
        bezier2Path.addCurve(to: CGPoint(x: 44.6, y: 98.05), controlPoint1: CGPoint(x: 48, y: 97.09), controlPoint2: CGPoint(x: 46.14, y: 97.24))
        bezier2Path.close()
        green.setFill()
        bezier2Path.fill()
        
        
        //// Group 2
        //// Rectangle Drawing
        context.saveGState()
        context.translateBy(x: 52.11, y: 26.41)
        context.rotate(by: -30 * CGFloat.pi/180)
        
        let rectanglePath = UIBezierPath(rect: CGRect(x: -13.84, y: -22.5, width: 27.68, height: 45))
        green.setFill()
        rectanglePath.fill()
        
        context.restoreGState()

    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
