//
//  ChainLogo.swift
//  ProjectName
//
//  Created by AuthorName on 12/2/16.
//  Copyright Â© 2016 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//
//  This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
//



import UIKit

public class ChainLogo : NSObject {

    //// Drawing Methods

    public dynamic class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 400, height: 400), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 400, height: 400), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 400, y: resizedFrame.height / 400)


        //// Color Declarations
        let green = UIColor(red: 0.408, green: 0.635, blue: 0.514, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        UIColor.black.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()


        //// icoTab1.pdf Group
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 208, y: 364.17))
        bezier2Path.addCurve(to: CGPoint(x: 294.6, y: 339.39), controlPoint1: CGPoint(x: 208, y: 364.17), controlPoint2: CGPoint(x: 254.09, y: 339.39))
        bezier2Path.addCurve(to: CGPoint(x: 400, y: 356.8), controlPoint1: CGPoint(x: 341.55, y: 339.39), controlPoint2: CGPoint(x: 400, y: 356.8))
        bezier2Path.addLine(to: CGPoint(x: 346.23, y: 234.64))
        bezier2Path.addCurve(to: CGPoint(x: 277.61, y: 220.95), controlPoint1: CGPoint(x: 346.23, y: 234.64), controlPoint2: CGPoint(x: 320.12, y: 222.8))
        bezier2Path.addCurve(to: CGPoint(x: 208, y: 240.54), controlPoint1: CGPoint(x: 235.09, y: 219.11), controlPoint2: CGPoint(x: 208, y: 240.54))
        bezier2Path.addLine(to: CGPoint(x: 208, y: 364.17))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 221.58, y: 392.24))
        bezier2Path.addCurve(to: CGPoint(x: 231.94, y: 400.01), controlPoint1: CGPoint(x: 227.73, y: 395.47), controlPoint2: CGPoint(x: 231.94, y: 400.01))
        bezier2Path.addCurve(to: CGPoint(x: 287.56, y: 383.62), controlPoint1: CGPoint(x: 231.94, y: 400.01), controlPoint2: CGPoint(x: 254.58, y: 383.62))
        bezier2Path.addCurve(to: CGPoint(x: 334.4, y: 386.82), controlPoint1: CGPoint(x: 301.47, y: 383.62), controlPoint2: CGPoint(x: 318.2, y: 384.31))
        bezier2Path.addCurve(to: CGPoint(x: 394.49, y: 400.01), controlPoint1: CGPoint(x: 365.64, y: 391.68), controlPoint2: CGPoint(x: 394.49, y: 400.01))
        bezier2Path.addLine(to: CGPoint(x: 400, y: 381.68))
        bezier2Path.addCurve(to: CGPoint(x: 295.22, y: 364.17), controlPoint1: CGPoint(x: 400, y: 381.68), controlPoint2: CGPoint(x: 341.65, y: 364.17))
        bezier2Path.addCurve(to: CGPoint(x: 208, y: 388.4), controlPoint1: CGPoint(x: 248.79, y: 364.17), controlPoint2: CGPoint(x: 208, y: 388.4))
        bezier2Path.addCurve(to: CGPoint(x: 221.58, y: 392.24), controlPoint1: CGPoint(x: 208, y: 388.4), controlPoint2: CGPoint(x: 215.44, y: 389.02))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 192, y: 364.17))
        bezier2Path.addCurve(to: CGPoint(x: 105.4, y: 339.39), controlPoint1: CGPoint(x: 192, y: 364.17), controlPoint2: CGPoint(x: 145.91, y: 339.39))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 356.8), controlPoint1: CGPoint(x: 58.45, y: 339.39), controlPoint2: CGPoint(x: 0, y: 356.8))
        bezier2Path.addLine(to: CGPoint(x: 53.77, y: 234.64))
        bezier2Path.addCurve(to: CGPoint(x: 122.39, y: 220.95), controlPoint1: CGPoint(x: 53.77, y: 234.64), controlPoint2: CGPoint(x: 79.88, y: 222.8))
        bezier2Path.addCurve(to: CGPoint(x: 192, y: 240.54), controlPoint1: CGPoint(x: 164.91, y: 219.11), controlPoint2: CGPoint(x: 192, y: 240.54))
        bezier2Path.addLine(to: CGPoint(x: 192, y: 364.17))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 178.42, y: 392.24))
        bezier2Path.addCurve(to: CGPoint(x: 168.06, y: 400.01), controlPoint1: CGPoint(x: 172.27, y: 395.47), controlPoint2: CGPoint(x: 168.06, y: 400.01))
        bezier2Path.addCurve(to: CGPoint(x: 112.44, y: 383.62), controlPoint1: CGPoint(x: 168.06, y: 400.01), controlPoint2: CGPoint(x: 145.42, y: 383.62))
        bezier2Path.addCurve(to: CGPoint(x: 65.6, y: 386.82), controlPoint1: CGPoint(x: 98.53, y: 383.62), controlPoint2: CGPoint(x: 81.8, y: 384.31))
        bezier2Path.addCurve(to: CGPoint(x: 5.51, y: 400.01), controlPoint1: CGPoint(x: 34.36, y: 391.68), controlPoint2: CGPoint(x: 5.51, y: 400.01))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 381.68))
        bezier2Path.addCurve(to: CGPoint(x: 104.78, y: 364.17), controlPoint1: CGPoint(x: 0, y: 381.68), controlPoint2: CGPoint(x: 58.35, y: 364.17))
        bezier2Path.addCurve(to: CGPoint(x: 192, y: 388.4), controlPoint1: CGPoint(x: 151.21, y: 364.17), controlPoint2: CGPoint(x: 192, y: 388.4))
        bezier2Path.addCurve(to: CGPoint(x: 178.42, y: 392.24), controlPoint1: CGPoint(x: 192, y: 388.4), controlPoint2: CGPoint(x: 184.56, y: 389.02))
        bezier2Path.close()
        green.setFill()
        bezier2Path.fill()


        //// Group 2
        //// Rectangle Drawing
        context.saveGState()
        context.translateBy(x: 199.83, y: 95)
        context.rotate(by: -30 * CGFloat.pi/180)

        let rectanglePath = UIBezierPath(rect: CGRect(x: -51.56, y: -79.93, width: 103.11, height: 159.86))
        green.setFill()
        rectanglePath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
